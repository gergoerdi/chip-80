module CHIP80.Font where

import Data.Bits
import qualified Data.ByteString as BS

font :: BS.ByteString
font = BS.pack $ foldMap pixelsOf
    [ [ "####"
      , "#  #"
      , "#  #"
      , "#  #"
      , "####"
      ]
    , [ "  # "
      , " ## "
      , "  # "
      , "  # "
      , " ###"
      ]
    , [ "####"
      , "   #"
      , "####"
      , "#   "
      , "####"
      ]
    , [ "####"
      , "   #"
      , "####"
      , "   #"
      , "####"
      ]
    , [ "#  #"
      , "#  #"
      , "####"
      , "   #"
      , "   #"
      ]
    , [ "####"
      , "#   "
      , "####"
      , "   #"
      , "####"
      ]
    , [ "####"
      , "#   "
      , "####"
      , "#  #"
      , "####"
      ]
    , [ "####"
      , "   #"
      , "  # "
      , " #  "
      , " #  "
      ]
    , [ "####"
      , "#  #"
      , "####"
      , "#  #"
      , "####"
      ]
    , [ "####"
      , "#  #"
      , "####"
      , "   #"
      , "####"
      ]
    , [ " ## "
      , "#  #"
      , "####"
      , "#  #"
      , "#  #"
      ]
    , [ "### "
      , "#  #"
      , "### "
      , "#  #"
      , "### "
      ]
    , [ "####"
      , "#   "
      , "#   "
      , "#   "
      , "####"
      ]
    , [ "### "
      , "#  #"
      , "#  #"
      , "#  #"
      , "### "
      ]
    , [ "####"
      , "#   "
      , "####"
      , "#   "
      , "####"
      ]
    , [ "####"
      , "#   "
      , "### "
      , "#   "
      , "#   "
      ]
    ]
  where
    rowToBits = foldr (\c b -> let b' = b `shiftR` 1 in if c == ' ' then b' else setBit b' 7) 0
    pixelsOf rows = [rowToBits row | row <- rows] ++ [0x00, 0x00, 0x00]
