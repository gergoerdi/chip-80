{-# LANGUAGE NumericUnderscores, BlockArguments, BinaryLiterals, RecordWildCards #-}
{-# LANGUAGE RecursiveDo #-}
{-# LANGUAGE FlexibleContexts #-}
module Chip80.Main (game) where

import HL2
import Chip80.CPU

import Z80
import Z80.Utils
import Data.Word
import Data.Int
import Control.Monad
import Data.Bits
import Data.Char

pictureWidth :: Word8
pictureWidth = 64

pictureHeight :: Word8
pictureHeight = 32

game :: Z80ASM
game = mdo
    ld HL prog
    ld IY 0x7200
    decLoopB (3 * 2) do
        ld A [HL]
        inc HL
        ld [IY] A
        inc IY

    ld HL sprite
    ld IY 0x7f00
    decLoopB 8 do
        ld A [HL]
        inc HL
        ld [IY] A
        inc IY

    ld IY 0x7200
    replicateM_ 3 $ call cpu

    ld HL $ videoStart + numCols * 8
    ld IX vidBuf
    decLoopB (pictureHeight `div` 2) do
        ld D 0

        push BC
        decLoopB (pictureWidth `div` 8) do
            push BC
            decLoopB 4 do
                ld E 0

                ld A [IX + 0]
                rlca
                rl E
                rlca
                rl E
                ld [IX + 0] A

                ld A [IX + fromIntegral (pictureWidth `div` 8)]
                rlca
                rl E
                rlca
                rl E
                ld [IX + fromIntegral (pictureWidth `div` 8)] A

                ld IY charmap
                add IY DE
                ldVia A [HL] [IY]
                inc HL
            pop BC
            inc IX
        pop BC

        ld DE $ fromIntegral pictureWidth `div` 8
        add IX DE
        ld DE $ numCols - (fromIntegral pictureWidth `div` 2)
        add HL DE

    loopForever $ pure ()

    vidBuf <- labelled $ db $ replicate (8 * 32) 0
    cpu <- labelled $ cpu_ 0x7000 vidBuf
    prog <- labelled $ db
      [ 0xaf, 0x00  -- LoadPtr F00
      , 0x00, 0xe0  -- ClearScreen
      , 0xd0, 0x18  -- DrawSprite V0 V1 8
      ]

    sprite <- labelled $ db
        [ 0b0000_0000
        , 0b0000_0000
        , 0b0011_1100
        , 0b0000_0100
        , 0b0000_1000
        , 0b0001_0000
        , 0b0001_0000
        , 0b0000_0000
        ]

    charmap <- labelled $ db
        [ 0x00 -- 00_00
        , 0x1d -- 00_01
        , 0x1e -- 00_10
        , 0x12 -- 00_11
        , 0x1c -- 01_00
        , 0xea -- 01_01
        , 0x19 -- 01_10
        , 0x18 -- 01_11
        , 0x1b -- 10_00
        , 0x1a -- 10_01
        , 0xd5 -- 10_10
        , 0x15 -- 10_11
        , 0x1f -- 11_00
        , 0x17 -- 11_01
        , 0x16 -- 11_10
        , 0xff -- 11_11
        ]

    pict <- labelled $ db $
      [ 0b0000_0000, 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b0101_0100, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b0010_1000, 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b0101_0100, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b0010_1000, 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b0101_0100, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b0000_0000, 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b0000_0110, 0b1010_0100, 0b0100_0110, 0b1110_0000
      , 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_1000, 0b1010_1010, 0b1010_1000, 0b1000_0000
      , 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b0000_1000, 0b1110_1010, 0b1010_0100, 0b1100_0000
      , 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_1000, 0b1010_1010, 0b1010_0010, 0b1000_0000
      , 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b0000_0110, 0b1010_0100, 0b0100_1100, 0b1110_0000
      , 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b0000_0110, 0b0100_1100, 0b1100_0000, 0b0100_0000
      , 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_1000, 0b1010_1010, 0b1010_0000, 0b1100_0000
      , 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b0000_1000, 0b1110_1100, 0b1010_0000, 0b0100_0000
      , 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_1000, 0b1010_1010, 0b1010_0000, 0b0100_0000
      , 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b0000_0110, 0b1010_1010, 0b1100_0000, 0b1110_0000
      , 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b1101_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b1010_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      , 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
      ]

    pure ()
