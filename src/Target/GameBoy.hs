module Target.GameBoy where

import Target.GameBoy.Operations
import Z80

import qualified Data.ByteString as BS
import Data.String (fromString)
import System.FilePath
import System.Directory
import Data.Word

emit :: IO ()
emit = do
    let prog = org 0x0100 mdo
            jp start

            -- Leave room for the header
            db $ replicate (0x050 - 3) 0x00

            start <- label
            -- di
            withLabel \waitVBlank -> do
                ldh A [0x44]
                cp 144
                jr C waitVBlank

            -- Turn off LCD
            ldhVia A [0x40] 0b0000_0000

            let copyHLtoDE = withLabel \loop -> do
                    ldVia A [DE] [HL] -- TODO: [HLi]
                    inc DE
                    inc HL
                    dec BC
                    ld A B
                    Z80.or C
                    jp NZ loop

            -- Tile definitions
            ld DE 0x9000
            ld HL tiles
            ld BC $ tilesEnd - tiles
            copyHLtoDE

            -- Tilemap
            ld DE 0x9800
            ld HL tilemap
            ld BC $ tilemapEnd - tilemap
            copyHLtoDE

            -- -- Scrolling
            -- ldhVia A [0x43] 0
            -- ldhVia A [0x42] 0

            -- Turn on LCD
            ldhVia A [0x40] 0b1000_0001

            ldhVia A [0x47] 0b1110_0100
            loopForever $ pure ()

            tiles <- labelled $ db $ replicate (64 `div` 8 * 32 `div` 8 * 16) 0b1010_0101
            -- tiles <- labelled $ db $
            --     [ 0x00,0xff, 0x00,0xff, 0x00,0xff, 0x00,0xff, 0x00,0xff, 0x00,0xff, 0x00,0xff, 0x00,0xff
            --     , 0x00,0xff, 0x00,0x80, 0x00,0x80, 0x00,0x80, 0x00,0x80, 0x00,0x80, 0x00,0x80, 0x00,0x80
            --     , 0x00,0xff, 0x00,0x7e, 0x00,0x7e, 0x00,0x7e, 0x00,0x7e, 0x00,0x7e, 0x00,0x7e, 0x00,0x7e
            --     , 0x00,0xff, 0x00,0x01, 0x00,0x01, 0x00,0x01, 0x00,0x01, 0x00,0x01, 0x00,0x01, 0x00,0x01
            --     , 0x00,0xff, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00
            --     , 0x00,0xff, 0x00,0x7f, 0x00,0x7f, 0x00,0x7f, 0x00,0x7f, 0x00,0x7f, 0x00,0x7f, 0x00,0x7f
            --     , 0x00,0xff, 0x03,0xfc, 0x00,0xf8, 0x00,0xf0, 0x00,0xe0, 0x20,0xc0, 0x00,0xc0, 0x40,0x80
            --     , 0x00,0xff, 0xc0,0x3f, 0x00,0x1f, 0x00,0x0f, 0x00,0x07, 0x04,0x03, 0x00,0x03, 0x02,0x01
            --     , 0x00,0x80, 0x00,0x80, 0x7f,0x80, 0x00,0x80, 0x00,0x80, 0x7f,0x80, 0x7f,0x80, 0x00,0x80
            --     , 0x00,0x7e, 0x2a,0x7e, 0xd5,0x7e, 0x2a,0x7e, 0x54,0x7e, 0xff,0x00, 0xff,0x00, 0x00,0x00
            --     , 0x00,0x01, 0x00,0x01, 0xff,0x01, 0x00,0x01, 0x01,0x01, 0xfe,0x01, 0xff,0x01, 0x00,0x01
            --     , 0x00,0x80, 0x80,0x80, 0x7f,0x80, 0x80,0x80, 0x00,0x80, 0xff,0x80, 0x7f,0x80, 0x80,0x80
            --     , 0x00,0x7f, 0x2a,0x7f, 0xd5,0x7f, 0x2a,0x7f, 0x55,0x7f, 0xff,0x00, 0xff,0x00, 0x00,0x00
            --     , 0x00,0xff, 0xaa,0xff, 0x55,0xff, 0xaa,0xff, 0x55,0xff, 0xfa,0x07, 0xfd,0x07, 0x02,0x07
            --     , 0x00,0x7f, 0x2a,0x7f, 0xd5,0x7f, 0x2a,0x7f, 0x55,0x7f, 0xaa,0x7f, 0xd5,0x7f, 0x2a,0x7f
            --     , 0x00,0xff, 0x80,0xff, 0x00,0xff, 0x80,0xff, 0x00,0xff, 0x80,0xff, 0x00,0xff, 0x80,0xff
            --     , 0x40,0x80, 0x00,0x80, 0x7f,0x80, 0x00,0x80, 0x00,0x80, 0x7f,0x80, 0x7f,0x80, 0x00,0x80
            --     , 0x00,0x3c, 0x02,0x7e, 0x85,0x7e, 0x0a,0x7e, 0x14,0x7e, 0xab,0x7e, 0x95,0x7e, 0x2a,0x7e
            --     , 0x02,0x01, 0x00,0x01, 0xff,0x01, 0x00,0x01, 0x01,0x01, 0xfe,0x01, 0xff,0x01, 0x00,0x01
            --     , 0x00,0xff, 0x80,0xff, 0x50,0xff, 0xa8,0xff, 0x50,0xff, 0xa8,0xff, 0x54,0xff, 0xa8,0xff
            --     , 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80
            --     , 0xff,0x00, 0xff,0x00, 0xff,0x00, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7e
            --     , 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xfe,0x01
            --     , 0x7f,0x80, 0xff,0x80, 0x7f,0x80, 0xff,0x80, 0x7f,0x80, 0xff,0x80, 0x7f,0x80, 0xff,0x80
            --     , 0xff,0x00, 0xff,0x00, 0xff,0x00, 0xaa,0x7f, 0xd5,0x7f, 0xaa,0x7f, 0xd5,0x7f, 0xaa,0x7f
            --     , 0xf8,0x07, 0xf8,0x07, 0xf8,0x07, 0x80,0xff, 0x00,0xff, 0xaa,0xff, 0x55,0xff, 0xaa,0xff
            --     , 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0xff,0x80, 0x7f,0x80, 0xff,0x80
            --     , 0xd5,0x7f, 0xaa,0x7f, 0xd5,0x7f, 0xaa,0x7f, 0xd5,0x7f, 0xaa,0x7f, 0xd5,0x7f, 0xaa,0x7f
            --     , 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xeb,0x3c
            --     , 0x54,0xff, 0xaa,0xff, 0x54,0xff, 0xaa,0xff, 0x54,0xff, 0xaa,0xff, 0x54,0xff, 0xaa,0xff
            --     , 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x00,0xff
            --     , 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0x2a,0xff
            --     , 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0x80,0xff
            --     , 0x7f,0x80, 0xff,0x80, 0x7f,0x80, 0xff,0x80, 0x7f,0x80, 0xff,0x80, 0x7f,0x80, 0xaa,0xff
            --     , 0xff,0x00, 0xff,0x00, 0xff,0x00, 0xff,0x00, 0xff,0x00, 0xff,0x00, 0xff,0x00, 0x2a,0xff
            --     , 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xfe,0x01, 0xfe,0x01, 0xfe,0x01, 0xfe,0x01, 0x80,0xff
            --     , 0x7f,0x80, 0xff,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x7f,0x80, 0x00,0xff
            --     , 0xfe,0x01, 0xfe,0x01, 0xfe,0x01, 0xfe,0x01, 0xfe,0x01, 0xfe,0x01, 0xfe,0x01, 0x80,0xff
            --     , 0x3f,0xc0, 0x3f,0xc0, 0x3f,0xc0, 0x1f,0xe0, 0x1f,0xe0, 0x0f,0xf0, 0x03,0xfc, 0x00,0xff
            --     , 0xfd,0x03, 0xfc,0x03, 0xfd,0x03, 0xf8,0x07, 0xf9,0x07, 0xf0,0x0f, 0xc1,0x3f, 0x82,0xff
            --     , 0x55,0xff, 0x2a,0x7e, 0x54,0x7e, 0x2a,0x7e, 0x54,0x7e, 0x2a,0x7e, 0x54,0x7e, 0x00,0x7e
            --     , 0x01,0xff, 0x00,0x01, 0x01,0x01, 0x00,0x01, 0x01,0x01, 0x00,0x01, 0x01,0x01, 0x00,0x01
            --     , 0x54,0xff, 0xae,0xf8, 0x50,0xf0, 0xa0,0xe0, 0x60,0xc0, 0x80,0xc0, 0x40,0x80, 0x40,0x80
            --     , 0x55,0xff, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00
            --     , 0x55,0xff, 0x6a,0x1f, 0x05,0x0f, 0x02,0x07, 0x05,0x07, 0x02,0x03, 0x03,0x01, 0x02,0x01
            --     , 0x54,0xff, 0x80,0x80, 0x00,0x80, 0x80,0x80, 0x00,0x80, 0x80,0x80, 0x00,0x80, 0x00,0x80
            --     , 0x55,0xff, 0x2a,0x1f, 0x0d,0x07, 0x06,0x03, 0x01,0x03, 0x02,0x01, 0x01,0x01, 0x00,0x01
            --     , 0x55,0xff, 0x2a,0x7f, 0x55,0x7f, 0x2a,0x7f, 0x55,0x7f, 0x2a,0x7f, 0x55,0x7f, 0x00,0x7f
            --     , 0x55,0xff, 0xaa,0xff, 0x55,0xff, 0xaa,0xff, 0x55,0xff, 0xaa,0xff, 0x55,0xff, 0x00,0xff
            --     , 0x15,0xff, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00
            --     , 0x55,0xff, 0x6a,0x1f, 0x0d,0x07, 0x06,0x03, 0x01,0x03, 0x02,0x01, 0x03,0x01, 0x00,0x01
            --     , 0x54,0xff, 0xa8,0xff, 0x54,0xff, 0xa8,0xff, 0x50,0xff, 0xa0,0xff, 0x40,0xff, 0x00,0xff
            --     , 0x00,0x7e, 0x2a,0x7e, 0xd5,0x7e, 0x2a,0x7e, 0x54,0x7e, 0xab,0x76, 0xdd,0x66, 0x22,0x66
            --     , 0x00,0x7c, 0x2a,0x7e, 0xd5,0x7e, 0x2a,0x7e, 0x54,0x7c, 0xff,0x00, 0xff,0x00, 0x00,0x00
            --     , 0x00,0x01, 0x00,0x01, 0xff,0x01, 0x02,0x01, 0x07,0x01, 0xfe,0x03, 0xfd,0x07, 0x0a,0x0f
            --     , 0x00,0x7c, 0x2a,0x7e, 0xd5,0x7e, 0x2a,0x7e, 0x54,0x7e, 0xab,0x7e, 0xd5,0x7e, 0x2a,0x7e
            --     , 0x00,0xff, 0xa0,0xff, 0x50,0xff, 0xa8,0xff, 0x54,0xff, 0xa8,0xff, 0x54,0xff, 0xaa,0xff
            --     , 0xdd,0x62, 0xbf,0x42, 0xfd,0x42, 0xbf,0x40, 0xff,0x00, 0xff,0x00, 0xf7,0x08, 0xef,0x18
            --     , 0xff,0x00, 0xff,0x00, 0xff,0x00, 0xab,0x7c, 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7e
            --     , 0xf9,0x07, 0xfc,0x03, 0xfd,0x03, 0xfe,0x01, 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xfe,0x01
            --     , 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7e, 0xd5,0x7e, 0xab,0x7c
            --     , 0xf7,0x18, 0xeb,0x1c, 0xd7,0x3c, 0xeb,0x3c, 0xd5,0x3e, 0xab,0x7e, 0xd5,0x7e, 0x2a,0xff
            --     , 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xfe,0x01, 0xff,0x01, 0xa2,0xff
            --     , 0x7f,0xc0, 0xbf,0xc0, 0x7f,0xc0, 0xbf,0xe0, 0x5f,0xe0, 0xaf,0xf0, 0x57,0xfc, 0xaa,0xff
            --     , 0xff,0x01, 0xfc,0x03, 0xfd,0x03, 0xfc,0x03, 0xf9,0x07, 0xf0,0x0f, 0xc1,0x3f, 0x82,0xff
            --     , 0x55,0xff, 0x2a,0xff, 0x55,0xff, 0x2a,0xff, 0x55,0xff, 0x2a,0xff, 0x55,0xff, 0x00,0xff
            --     , 0x45,0xff, 0xa2,0xff, 0x41,0xff, 0x82,0xff, 0x41,0xff, 0x80,0xff, 0x01,0xff, 0x00,0xff
            --     , 0x54,0xff, 0xaa,0xff, 0x54,0xff, 0xaa,0xff, 0x54,0xff, 0xaa,0xff, 0x54,0xff, 0x00,0xff
            --     , 0x15,0xff, 0x2a,0xff, 0x15,0xff, 0x0a,0xff, 0x15,0xff, 0x0a,0xff, 0x01,0xff, 0x00,0xff
            --     , 0x01,0xff, 0x80,0xff, 0x01,0xff, 0x80,0xff, 0x01,0xff, 0x80,0xff, 0x01,0xff, 0x00,0xff
            --     ]
            tilesEnd <- label

            tilemap <- labelled $ db
                [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x01, 0x02, 0x03, 0x01, 0x04, 0x03, 0x01, 0x05, 0x00, 0x01, 0x05, 0x00, 0x06, 0x04, 0x07, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0b, 0x0e, 0x0f, 0x08, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x0f, 0x14, 0x1b, 0x0f, 0x14, 0x1c, 0x16, 0x1d, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x22, 0x25, 0x1e, 0x22, 0x25, 0x26, 0x22, 0x27, 0x1d, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x01, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2b, 0x2e, 0x2d, 0x2f, 0x30, 0x2d, 0x31, 0x32, 0x33, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x08, 0x34, 0x0a, 0x0b, 0x11, 0x0a, 0x0b, 0x35, 0x36, 0x0b, 0x0e, 0x0f, 0x08, 0x37, 0x0a, 0x38, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x14, 0x39, 0x16, 0x17, 0x1c, 0x16, 0x17, 0x3a, 0x3b, 0x17, 0x1b, 0x0f, 0x14, 0x3c, 0x16, 0x1d, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x1e, 0x3d, 0x3e, 0x3f, 0x22, 0x27, 0x21, 0x1f, 0x20, 0x21, 0x22, 0x25, 0x1e, 0x22, 0x40, 0x1d, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44, 0x30, 0x33, 0x41, 0x45, 0x43, 0x41, 0x30, 0x43, 0x41, 0x30, 0x33, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
                ]
            tilemapEnd <- label
            pure ()

    let name = "_build/chip80-gameboy"
    createDirectoryIfMissing True (takeDirectory name)
    BS.writeFile (name <.> "obj") $ asmData prog
    BS.writeFile (name <.> "gb") $ gb prog

gb :: ASMBlock -> BS.ByteString
gb prog = BS.take (8 * 1024) $ mconcat
    [ BS.replicate (fromIntegral $ asmOrg prog) 0x00
    , asmData prog
    , BS.replicate (8 * 1024) 0x00
    ]
